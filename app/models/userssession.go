// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// UsersSession represents a row from 'public.users_sessions'.
type UsersSession struct {
	ID        int           `json:"id"`         // id
	UserID    sql.NullInt64 `json:"user_id"`    // user_id
	SessionID string        `json:"session_id"` // session_id
	Modified  pq.NullTime   `json:"modified"`   // modified
	Created   pq.NullTime   `json:"created"`    // created

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the UsersSession exists in the database.
func (us *UsersSession) Exists() bool {
	return us._exists
}

// Deleted provides information if the UsersSession has been deleted from the database.
func (us *UsersSession) Deleted() bool {
	return us._deleted
}

// Insert inserts the UsersSession to the database.
func (us *UsersSession) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if us._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.users_sessions (` +
		`user_id, session_id, modified, created` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, us.UserID, us.SessionID, us.Modified, us.Created)
	err = db.QueryRow(sqlstr, us.UserID, us.SessionID, us.Modified, us.Created).Scan(&us.ID)
	if err != nil {
		return err
	}

	// set existence
	us._exists = true

	return nil
}

// Update updates the UsersSession in the database.
func (us *UsersSession) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !us._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if us._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.users_sessions SET (` +
		`user_id, session_id, modified, created` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE id = $5`

	// run query
	XOLog(sqlstr, us.UserID, us.SessionID, us.Modified, us.Created, us.ID)
	_, err = db.Exec(sqlstr, us.UserID, us.SessionID, us.Modified, us.Created, us.ID)
	return err
}

// Save saves the UsersSession to the database.
func (us *UsersSession) Save(db XODB) error {
	if us.Exists() {
		return us.Update(db)
	}

	return us.Insert(db)
}

// Upsert performs an upsert for UsersSession.
//
// NOTE: PostgreSQL 9.5+ only
func (us *UsersSession) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if us._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.users_sessions (` +
		`id, user_id, session_id, modified, created` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, user_id, session_id, modified, created` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.user_id, EXCLUDED.session_id, EXCLUDED.modified, EXCLUDED.created` +
		`)`

	// run query
	XOLog(sqlstr, us.ID, us.UserID, us.SessionID, us.Modified, us.Created)
	_, err = db.Exec(sqlstr, us.ID, us.UserID, us.SessionID, us.Modified, us.Created)
	if err != nil {
		return err
	}

	// set existence
	us._exists = true

	return nil
}

// Delete deletes the UsersSession from the database.
func (us *UsersSession) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !us._exists {
		return nil
	}

	// if deleted, bail
	if us._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.users_sessions WHERE id = $1`

	// run query
	XOLog(sqlstr, us.ID)
	_, err = db.Exec(sqlstr, us.ID)
	if err != nil {
		return err
	}

	// set deleted
	us._deleted = true

	return nil
}

// GetAllUsersSessions returns all rows from 'public.users_sessions',
// ordered by "created_at" in descending order.
func GetAllUsersSessions(db XODB) ([]*UsersSession, error) {
	const sqlstr = `SELECT ` +
		`*` +
		`FROM public.users_sessions`

	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*UsersSession
	for q.Next() {
		us := UsersSession{}

		// scan
		err = q.Scan(&us.ID, &us.UserID, &us.SessionID, &us.Modified, &us.Created)
		if err != nil {
			return nil, err
		}

		res = append(res, &us)
	}

	return res, nil
}

// GetChunkedUsersSessions returns pagingated rows from 'public.users_sessions',
// ordered by "created_at" in descending order.
func GetChunkedUsersSessions(db XODB, limit int, offset int) ([]*UsersSession, error) {
	const sqlstr = `SELECT ` +
		`*` +
		`FROM public.users_sessions LIMIT $1 OFFSET $2`

	q, err := db.Query(sqlstr, limit, offset)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*UsersSession
	for q.Next() {
		us := UsersSession{}

		// scan
		err = q.Scan(&us.ID, &us.UserID, &us.SessionID, &us.Modified, &us.Created)
		if err != nil {
			return nil, err
		}

		res = append(res, &us)
	}

	return res, nil
}

// User returns the User associated with the UsersSession's UserID (user_id).
//
// Generated from foreign key 'users_sessions_user_id_fkey'.
func (us *UsersSession) User(db XODB) (*User, error) {
	return UserByID(db, int(us.UserID.Int64))
}

// UsersSessionByID retrieves a row from 'public.users_sessions' as a UsersSession.
//
// Generated from index 'users_sessions_pkey'.
func UsersSessionByID(db XODB, id int) (*UsersSession, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, session_id, modified, created ` +
		`FROM public.users_sessions ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	us := UsersSession{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&us.ID, &us.UserID, &us.SessionID, &us.Modified, &us.Created)
	if err != nil {
		return nil, err
	}

	return &us, nil
}
