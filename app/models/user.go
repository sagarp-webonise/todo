// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// User represents a row from 'public.users'.
type User struct {
	ID            int            `json:"id"`             // id
	Username      string         `json:"username"`       // username
	FirstName     sql.NullString `json:"first_name"`     // first_name
	LastName      sql.NullString `json:"last_name"`      // last_name
	Email         sql.NullString `json:"email"`          // email
	Password      string         `json:"password"`       // password
	LoginAttempts int            `json:"login_attempts"` // login_attempts
	Modified      pq.NullTime    `json:"modified"`       // modified
	Created       pq.NullTime    `json:"created"`        // created

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the User exists in the database.
func (u *User) Exists() bool {
	return u._exists
}

// Deleted provides information if the User has been deleted from the database.
func (u *User) Deleted() bool {
	return u._deleted
}

// Insert inserts the User to the database.
func (u *User) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.users (` +
		`username, first_name, last_name, email, password, login_attempts, modified, created` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, u.Username, u.FirstName, u.LastName, u.Email, u.Password, u.LoginAttempts, u.Modified, u.Created)
	err = db.QueryRow(sqlstr, u.Username, u.FirstName, u.LastName, u.Email, u.Password, u.LoginAttempts, u.Modified, u.Created).Scan(&u.ID)
	if err != nil {
		return err
	}

	// set existence
	u._exists = true

	return nil
}

// Update updates the User in the database.
func (u *User) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if u._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.users SET (` +
		`username, first_name, last_name, email, password, login_attempts, modified, created` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) WHERE id = $9`

	// run query
	XOLog(sqlstr, u.Username, u.FirstName, u.LastName, u.Email, u.Password, u.LoginAttempts, u.Modified, u.Created, u.ID)
	_, err = db.Exec(sqlstr, u.Username, u.FirstName, u.LastName, u.Email, u.Password, u.LoginAttempts, u.Modified, u.Created, u.ID)
	return err
}

// Save saves the User to the database.
func (u *User) Save(db XODB) error {
	if u.Exists() {
		return u.Update(db)
	}

	return u.Insert(db)
}

// Upsert performs an upsert for User.
//
// NOTE: PostgreSQL 9.5+ only
func (u *User) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.users (` +
		`id, username, first_name, last_name, email, password, login_attempts, modified, created` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, username, first_name, last_name, email, password, login_attempts, modified, created` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.username, EXCLUDED.first_name, EXCLUDED.last_name, EXCLUDED.email, EXCLUDED.password, EXCLUDED.login_attempts, EXCLUDED.modified, EXCLUDED.created` +
		`)`

	// run query
	XOLog(sqlstr, u.ID, u.Username, u.FirstName, u.LastName, u.Email, u.Password, u.LoginAttempts, u.Modified, u.Created)
	_, err = db.Exec(sqlstr, u.ID, u.Username, u.FirstName, u.LastName, u.Email, u.Password, u.LoginAttempts, u.Modified, u.Created)
	if err != nil {
		return err
	}

	// set existence
	u._exists = true

	return nil
}

// Delete deletes the User from the database.
func (u *User) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return nil
	}

	// if deleted, bail
	if u._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.users WHERE id = $1`

	// run query
	XOLog(sqlstr, u.ID)
	_, err = db.Exec(sqlstr, u.ID)
	if err != nil {
		return err
	}

	// set deleted
	u._deleted = true

	return nil
}

// GetAllUsers returns all rows from 'public.users',
// ordered by "created_at" in descending order.
func GetAllUsers(db XODB) ([]*User, error) {
	const sqlstr = `SELECT ` +
		`*` +
		`FROM public.users`

	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*User
	for q.Next() {
		u := User{}

		// scan
		err = q.Scan(&u.ID, &u.Username, &u.FirstName, &u.LastName, &u.Email, &u.Password, &u.LoginAttempts, &u.Modified, &u.Created)
		if err != nil {
			return nil, err
		}

		res = append(res, &u)
	}

	return res, nil
}

// GetChunkedUsers returns pagingated rows from 'public.users',
// ordered by "created_at" in descending order.
func GetChunkedUsers(db XODB, limit int, offset int) ([]*User, error) {
	const sqlstr = `SELECT ` +
		`*` +
		`FROM public.users LIMIT $1 OFFSET $2`

	q, err := db.Query(sqlstr, limit, offset)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*User
	for q.Next() {
		u := User{}

		// scan
		err = q.Scan(&u.ID, &u.Username, &u.FirstName, &u.LastName, &u.Email, &u.Password, &u.LoginAttempts, &u.Modified, &u.Created)
		if err != nil {
			return nil, err
		}

		res = append(res, &u)
	}

	return res, nil
}

// UserByEmail retrieves a row from 'public.users' as a User.
//
// Generated from index 'users_email_key'.
func UserByEmail(db XODB, email sql.NullString) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, username, first_name, last_name, email, password, login_attempts, modified, created ` +
		`FROM public.users ` +
		`WHERE email = $1`

	// run query
	XOLog(sqlstr, email)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, email).Scan(&u.ID, &u.Username, &u.FirstName, &u.LastName, &u.Email, &u.Password, &u.LoginAttempts, &u.Modified, &u.Created)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// UserByID retrieves a row from 'public.users' as a User.
//
// Generated from index 'users_pkey'.
func UserByID(db XODB, id int) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, username, first_name, last_name, email, password, login_attempts, modified, created ` +
		`FROM public.users ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&u.ID, &u.Username, &u.FirstName, &u.LastName, &u.Email, &u.Password, &u.LoginAttempts, &u.Modified, &u.Created)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// UserByUsername retrieves a row from 'public.users' as a User.
//
// Generated from index 'users_username_key'.
func UserByUsername(db XODB, username string) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, username, first_name, last_name, email, password, login_attempts, modified, created ` +
		`FROM public.users ` +
		`WHERE username = $1`

	// run query
	XOLog(sqlstr, username)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, username).Scan(&u.ID, &u.Username, &u.FirstName, &u.LastName, &u.Email, &u.Password, &u.LoginAttempts, &u.Modified, &u.Created)
	if err != nil {
		return nil, err
	}

	return &u, nil
}
